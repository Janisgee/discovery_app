// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users_emailPw.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUserEmailPw = `-- name: CreateUserEmailPw :one
INSERT INTO usersEmailPw (id, email, created_at, expired_at, pw_reset_code, user_id)
VALUES(
gen_random_uuid(),
$1,
NOW(),
NOW() + INTERVAL '10 minute',
$2,
$3
)
On CONFLICT (user_id, email)
DO UPDATE
SET 
    created_at = NOW(),
    expired_at = NOW() + INTERVAL '10 minute',
    pw_reset_code = EXCLUDED.pw_reset_code
RETURNING id, email, created_at, expired_at, pw_reset_code, user_id
`

type CreateUserEmailPwParams struct {
	Email       string
	PwResetCode string
	UserID      uuid.UUID
}

func (q *Queries) CreateUserEmailPw(ctx context.Context, arg CreateUserEmailPwParams) (Usersemailpw, error) {
	row := q.db.QueryRowContext(ctx, createUserEmailPw, arg.Email, arg.PwResetCode, arg.UserID)
	var i Usersemailpw
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.ExpiredAt,
		&i.PwResetCode,
		&i.UserID,
	)
	return i, err
}

const deleteUserEmailPw = `-- name: DeleteUserEmailPw :one
DELETE FROM usersEmailPw WHERE pw_reset_code = $1 
RETURNING id, email, created_at, expired_at, pw_reset_code, user_id
`

func (q *Queries) DeleteUserEmailPw(ctx context.Context, pwResetCode string) (Usersemailpw, error) {
	row := q.db.QueryRowContext(ctx, deleteUserEmailPw, pwResetCode)
	var i Usersemailpw
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.ExpiredAt,
		&i.PwResetCode,
		&i.UserID,
	)
	return i, err
}

const getUserEmailPw = `-- name: GetUserEmailPw :one
SELECT id, email, created_at, expired_at, pw_reset_code, user_id FROM usersEmailPw WHERE pw_reset_code = $1 AND expired_at > Now() LIMIT 1
`

func (q *Queries) GetUserEmailPw(ctx context.Context, pwResetCode string) (Usersemailpw, error) {
	row := q.db.QueryRowContext(ctx, getUserEmailPw, pwResetCode)
	var i Usersemailpw
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.ExpiredAt,
		&i.PwResetCode,
		&i.UserID,
	)
	return i, err
}
