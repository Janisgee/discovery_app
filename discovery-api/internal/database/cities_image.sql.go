// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cities_image.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createCityImage = `-- name: CreateCityImage :one
INSERT INTO cities_image (id, country_id, country, city, city_image, created_at)
VALUES(
gen_random_uuid(), 
$1,
$2,
$3,
$4,
NOW()
)
On CONFLICT (country, city)
DO NOTHING
RETURNING id, country_id, country, city, city_image, created_at
`

type CreateCityImageParams struct {
	CountryID uuid.UUID
	Country   string
	City      string
	CityImage string
}

func (q *Queries) CreateCityImage(ctx context.Context, arg CreateCityImageParams) (CitiesImage, error) {
	row := q.db.QueryRowContext(ctx, createCityImage,
		arg.CountryID,
		arg.Country,
		arg.City,
		arg.CityImage,
	)
	var i CitiesImage
	err := row.Scan(
		&i.ID,
		&i.CountryID,
		&i.Country,
		&i.City,
		&i.CityImage,
		&i.CreatedAt,
	)
	return i, err
}

const getCity = `-- name: GetCity :one
SELECT id, country_id, country, city, city_image, created_at FROM cities_image WHERE city=$1 AND country=$2 LIMIT 1
`

type GetCityParams struct {
	City    string
	Country string
}

func (q *Queries) GetCity(ctx context.Context, arg GetCityParams) (CitiesImage, error) {
	row := q.db.QueryRowContext(ctx, getCity, arg.City, arg.Country)
	var i CitiesImage
	err := row.Scan(
		&i.ID,
		&i.CountryID,
		&i.Country,
		&i.City,
		&i.CityImage,
		&i.CreatedAt,
	)
	return i, err
}
